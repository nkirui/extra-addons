
# main branch
name: stg build/deploy

on:
  push:
    branches:
      - test
    tags-ignore:
      # Ignore all tags as we do not want
      # to trigger this workflow by a release.
      - "**"
env:
  KUSTOMIZE_PATH: ".infra/odoo"
  PROJECTNAME: "odoo-erp"
jobs:  
  build:
    name: Build and Push the image
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.release_version.outputs.VERSION }}
    
    steps:
    - uses: actions/checkout@master
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
  
    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-         
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Get development release version
      id: release_version
      # run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      run: |
        # Extract the version from the GITHUB_REF
        VERSION=${GITHUB_REF##*/}
        echo "VERSION=${VERSION}" >> $GITHUB_ENV
        echo "::set-output name=VERSION::${VERSION}"
  
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        push: true
        file: 17.0/Dockerfile
        tags: "nkirui2030/${{ env.PROJECTNAME }}, nkirui2030/${{ env.PROJECTNAME }}:${{ steps.release_version.outputs.VERSION }}"

        build-args: |
            VERSION=${{ steps.release_version.outputs.VERSION }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
    
    - name: Print image tag & digest
      run: |
        echo "digest : ${{ steps.docker_build.outputs.digest }}"
        echo "tag    : ${{ steps.release_version.outputs.VERSION }}"
 
  deploy:
    name: Update k8s
    runs-on: ubuntu-latest
    needs: [build]    
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        repository: ${{ github.repository }}
        ref: main
        token: ${{ secrets.GH_ACTIONS }}   

    - name: Push release tag to config repository
      run: |
        echo ${{ needs.build.outputs.VERSION  }} > .infra/helm/odoo-erp/crds/vcs/tag
        git config user.name $(git log -n 1 --pretty=format:%an)
        git config user.email $(git log -n 1 --pretty=format:%ae)
        git pull origin main
        git add .infra/helm/odoo-erp/crds/vcs/tag
        git commit .infra/helm/odoo-erp/crds/vcs/tag -m "odoo ${{ needs.build.outputs.VERSION  }}"
        git push origin HEAD 
    
    # - name: Setup Kustomize
    #   uses: imranismail/setup-kustomize@v2
    #   with:
    #     kustomize-version: "5.1.1"
      
    # - name: Update docker image on k8s
    #   run: |
    #    cd ${{ env.KUSTOMIZE_PATH }}       
    #    kustomize edit set image "${{ secrets.DOCKERHUB_USERNAME }}/${{ env.PROJECTNAME }}:${{ needs.build.outputs.VERSION }}"
    #    kustomize build .
    #    cat kustomization.yaml
    
    # - name: Commit release tag to the repo
    #   run: |
    #     git config user.name $(git log -n 1 --pretty=format:%an)
    #     git config user.email $(git log -n 1 --pretty=format:%ae)
    #     git pull origin main
    #     git add .infra/
    #     git commit -am "${{ env.PROJECTNAME }} - ${{ needs.build.outputs.VERSION }}"
    #     git push -f origin main

